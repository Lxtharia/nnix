# vim: et ts=2 sw=2 listchars+=leadmultispace\:\|\  list
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "uas" "usbhid" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];
  boot.supportedFilesystems = [ "ntfs" ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/986cc9ef-8aab-466b-bfa9-0d6c8d1ab499";
      fsType = "ext4";
    };
  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/3C03-E301";
      fsType = "vfat";
    };

  # Alexandria
  fileSystems."/mnt/e" =
    { device = "/dev/disk/by-uuid/044ED70B4ED6F480";
      fsType = "ntfs-3g";
      options = [ "rw" "windows_names" "nls=utf8" "uid=1000" "gid=100" "dmask=007" "fmask=117" ];
    };
  # Riften
  fileSystems."/mnt/r" =
    { device = "/dev/disk/by-uuid/4A7C361B7C36026D";
      fsType = "lowntfs-3g";
      options = [ "rw" "user" "exec" "uid=1000" "gid=100" "dmask=007" "fmask=117" "nls=utf8" "windows_names" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  networking.nameservers = [ "192.168.2.222" "1.1.1.1" "9.9.9.9" ];
  # networking.interfaces.enp7s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

### NVIDIA stuff

  # Enable OpenGL
  hardware.opengl = {
    enable = true;
    driSupport = true;
    driSupport32Bit = true;
  };
  # hardware.graphics = {
  #   enable = true;
  #   enable32Bit = true;
  # };

  # Load nvidia driver for Xorg and Wayland
  services.xserver.videoDrivers = ["nvidia"];

  hardware.nvidia = {

    # Modesetting is required.
    modesetting.enable = true;

    # Nvidia power management. Experimental, and can cause sleep/suspend to fail.
    # Enable this if you have graphical corruption issues or application crashes after waking
    # up from sleep. This fixes it by saving the entire VRAM memory to /tmp/ instead
    # of just the bare essentials.
    powerManagement.enable = true;

    # Fine-grained power management. Turns off GPU when not in use.
    # Experimental and only works on modern Nvidia GPUs (Turing or newer).
    powerManagement.finegrained = false;

    # Use the NVidia open source kernel module (not to be confused with the
    # independent third-party "nouveau" open source driver).
    # Support is limited to the Turing and later architectures. Full list of
    # supported GPUs is at:
    # https://github.com/NVIDIA/open-gpu-kernel-modules#compatible-gpus
    # Only available from driver 515.43.04+
    # Currently alpha-quality/buggy, so false is currently the recommended setting.
    open = false;

    # Enable the Nvidia settings menu,
    # accessible via `nvidia-settings`.
    nvidiaSettings = true;

    # Optionally, you may need to select the appropriate driver version for your specific GPU.
    package = config.boot.kernelPackages.nvidiaPackages.production;
  };

  ### Display stuff
  services.displayManager.sddm.setupScript =
  ''
  xrandr --output DVI-D-0 --auto --primary
  xrandr --output DP-0 --disable
  xrandr --output DP-1 --disable
  xrandr --output DP-3 --disable
  xrandr --output DP-4 --disable
  '';
  # xrandr --output DP-0 --left-of DVI-D-0  --rotate left --noprimary
  # xrandr --output DP-4 --right-of DVI-D-0 --rotate left --noprimary


}
